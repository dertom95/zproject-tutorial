################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

from __future__ import print_function
import os, sys
from ctypes import *
from ctypes.util import find_library

# zprotut
lib = None
# check to see if the shared object was embedded locally, attempt to load it
# if not, try to load it using the default system paths...
# we need to use os.chdir instead of trying to modify $LD_LIBRARY_PATH and reloading the interpreter
t = os.getcwd()
p = os.path.join(os.path.dirname(__file__), '..')  # find the path to our $project_ctypes.py
os.chdir(p)  # change directories briefly

try:
    from zprotut import libzprotut                  # attempt to import the shared lib if it exists
    lib = CDLL(libzprotut.__file__)          # if it exists try to load the shared lib
except ImportError:
    pass
finally:
    os.chdir(t)  # switch back to orig dir

if not lib:
    try:
        # If LD_LIBRARY_PATH or your OSs equivalent is set, this is the only way to
        # load the library.  If we use find_library below, we get the wrong result.
        if os.name == 'posix':
            if sys.platform == 'darwin':
                lib = cdll.LoadLibrary('libzprotut.1.dylib')
            else:
                lib = cdll.LoadLibrary("libzprotut.so.1")
        elif os.name == 'nt':
            lib = cdll.LoadLibrary('libzprotut.dll')
    except OSError:
        libpath = find_library("zprotut")
        if not libpath:
            raise ImportError("Unable to find libzprotut")
        lib = cdll.LoadLibrary(libpath)

class shouter_t(Structure):
    pass # Empty - only for type checking
shouter_p = POINTER(shouter_t)


# shouter
lib.shouter_new.restype = shouter_p
lib.shouter_new.argtypes = [c_char_p]
lib.shouter_destroy.restype = None
lib.shouter_destroy.argtypes = [POINTER(shouter_p)]
lib.shouter_shout.restype = c_int
lib.shouter_shout.argtypes = [shouter_p, c_char_p]
lib.shouter_shout_multi.restype = c_int
lib.shouter_shout_multi.argtypes = [shouter_p, c_char_p, c_int]
lib.shouter_test.restype = None
lib.shouter_test.argtypes = [c_bool]

class Shouter(object):
    """
    The shouter-class the one and only way to shout!
    """

    DEFAULT_SHOUT = "hooray!" # The default shout
    SOME_INT = 1895 # This is an int constant
    allow_destruct = False
    def __init__(self, *args):
        """
        Create a new shouter
        """
        if len(args) == 2 and type(args[0]) is c_void_p and isinstance(args[1], bool):
            self._as_parameter_ = cast(args[0], shouter_p) # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        elif len(args) == 2 and type(args[0]) is shouter_p and isinstance(args[1], bool):
            self._as_parameter_ = args[0] # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        else:
            assert(len(args) == 1)
            self._as_parameter_ = lib.shouter_new(args[0]) # Creation of new raw type
            self.allow_destruct = True

    def __del__(self):
        """
        Destroy the shouter.
        """
        if self.allow_destruct:
            lib.shouter_destroy(byref(self._as_parameter_))

    def __eq__(self, other):
        if type(other) == type(self):
            return other.c_address() == self.c_address()
        elif type(other) == c_void_p:
            return other.value == self.c_address()

    def c_address(self):
        """
        Return the address of the object pointer in c.  Useful for comparison.
        """
        return addressof(self._as_parameter_.contents)

    def __bool__(self):
        "Determine whether the object is valid by converting to boolean" # Python 3
        return self._as_parameter_.__bool__()

    def __nonzero__(self):
        "Determine whether the object is valid by converting to boolean" # Python 2
        return self._as_parameter_.__nonzero__()

    def shout(self, shout_text):
        """
        Shout once!
        """
        return lib.shouter_shout(self._as_parameter_, shout_text)

    def shout_multi(self, shout_text, times):
        """
        Shout multiple times!
        """
        return lib.shouter_shout_multi(self._as_parameter_, shout_text, times)

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        return lib.shouter_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
